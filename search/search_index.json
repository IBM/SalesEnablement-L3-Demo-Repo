{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"IBM watsonx Code Assistant for Z","text":"<p>The purpose of this document is to showcase the capabilities of IBM watsonx Code Assistant for Z to execute the Understand, Refactor, and Transform phases on the Z Virtual Access (zVA) demo environment.</p> <p>This document contains a set of instructions that, if followed step by step, will provide knowledge and confidence to demonstrate IBM watsonx Code Assistant for Z. </p>"},{"location":"demo-the-understand/Demo%20the%20Understand%20phase%20summary/","title":"Section summary","text":"<p>In the Understand phase of this lab: 1. You checked an application\u2019s callgraph that showed of its transactions. Then you drilled into the SSC1 transaction to understand its flow and related components.</p> <ol> <li>You looked at the LGACDB01 data access program and noted how this program is used to insert a customer record into the CUSTOMER data table.</li> </ol> <p>You will use everything you learned here in the Refactor and Transform steps that follow.</p>"},{"location":"demo-the-understand/Demo%20the%20Understand%20phase/","title":"Demo the Understand Phase using the Application Discovery Tool on IBM watsonx Code Assistant for Z","text":"<ol> <li>In Z Virtual Access, click IBM Developer for z/OS (A) in the taskbar to open it.    </li> </ol> <p>It may take a minute for the application to open, but you will soon see the splash screen.    </p> <p>The IBM Developer for z/OS Integrated Developer Environment (IDE) opens displaying the Explore projects tab (A).    </p> <ol> <li> <p>Right-click below the quick filter area (A), and click Get project list (B).    </p> </li> <li> <p>Click GenApp (A) in the Project list.        A new field with a list of options appears on the right side of the screen.</p> </li> <li> <p>From the quick filter box (A), expand the Mainframe Graphs twistie (B), and double-click Transaction Callgraph (C).    </p> </li> <li> <p>It may take a moment for the GenApp \u2013 Transaction Call Graph Analysis pop-up that is needed to do the next step to appear.    You will see an executing Transaction Callgraph message at the bottom of the pop-up displaying a green progress bar (A).    Select everything in the Available transactions box using the add all items button (looks like a fast forward button) (B), and move them to the Selected transactions box.    Then click Finish (C) to load the transactions.        A call graph is loaded with all the transactions in this profiled application. (Note: it may take a few minutes for the graph to build.)    </p> </li> <li> <p>Zoom in so you can see the transaction named SSC1 (A). This transaction is related to the CUSTOMER table. The SSC1 transaction is used to add, insert, and update the CUSTOMER table. SSC1 is used in the next phase of this demo.     Note: There are some tools in the upper right corner of the graph view to help you navigate and zoom.    - Use the Mouse Pan Tool to move to different areas of the graph. Click the Mouse Pan tool (the icon looks like a hand) in the top right and drag the hand icon around the graph to pan to different areas.    - Use the Interactive Zoom Tool to zoom in and out of the graph. Click the Interactive Zoom Tool (the icon looks like a magnifying glass with an arrow inside it). Click and hold on an area on the graph and if you drag your cursor downwards, this will zoom in to the graph. Click and hold on an area on the graph and and if you drag your cursor upwards, this will zoom out of the graph.    - Use the Marquee Zoom Tool to zoom into a specific area. Click Marquee Zoom tool (the icon looks like a magnifying glass) in the top right and drag your cursor to draw a box around a specific area on the graph. Once you release your cursor, the graph will be zoomed into that area    - Use the Fit in Canvas Tool (the icon looks like a magnifying glass with red corners) to zoom the graph back out to full view.    - As you use these tools, the Graph Overview window in the upper left allows you to see where you are in the graph and will highlight the area with a blue box.</p> </li> <li> <p>Select the Explore tab (A) to return to the view shown in Step 4 where a list of options appears on the right side of the screen under the quick filter box.     In this new field, expand the Mainframe Graphs twistie (B) and double-click the Transaction Callgraph option (A).        It may take a moment for the pop-up needed to do the next step to open. You will see executing Transaction Callgraph at the bottom with a green progress bar.</p> </li> <li> <p>This time (unlike in Step 7), select only the SSC1 transaction (A), and this time use the add selected items icon (it looks like a play button) (B) to just add this one transaction to the Selected transactions box on the right. Then click Finish (C).        The SSCI transaction graph begins loading. (This may take a minute to load, you will see Loading graph message in the middle of the screen).    </p> <p>A transaction callgraph has different components. (Use the pan and zoom tools detailed earlier to look more closely at these components). For example: the SSCI\u2019s CICS transactions; the main transaction program (LGTESTC1), which calls the SSMAPC1 map; and, depending on the function selected, can perform different operations. In this example; Add/Insert Customer (LGACUS01), Inquire Customer (LGICUS01), Update Customer (LGUCUS01), Writes messages back to the user (LGSTSQ), and Unknown program with no source code information (AAAAAAAA).</p> <p>These programs call data access programs that interact with the table CUSTOMER. For example; Add/Insert Customer (LGACDB01), Inquire Customer (LGICDB01), Update Customer (LGUCDB01), Writes messages back to the user (LGSTSQ), and Unknown program with no source code information (AAAAAAAA).</p> </li> <li> <p>Double-click on the COBOL LGACDB01 white and blue box (A). The code opens at the bottom (B).    </p> </li> <li>Drag the LGACDB01 code tab at the bottom, to the right side of the graph (A) in step 9 (before you release your button, you will see guardrails where this window will be placed) so you can see the code beside the navigation view.     Note: Close all open tabs other than the tabs with the graph and code. The other tabs can be closed via the minimize icon (looks like \u2013) in the top right of each window.</li> <li>In the LGACDB01.cbl code, scroll down to the INSERT-CUSTOMER section (A), the main function is to insert a record into the CUSTOMER table.    </li> </ol>"},{"location":"execute-the-transform/How%20to%20execute%20the%20Transform%20phase%20summary/","title":"Section summary","text":"<p>In the Transform phase of this lab:</p> <ol> <li>You used the LGACDB01 workbook that you exported in the Refactor phase to insert customer functionality.</li> <li>You imported this workbook using IBM watsonx Code Assistant for z.</li> <li>You generated Java classes and Java methods.</li> </ol> <p>You have now successfully completed the steps for the Understand, Refactor, and Transform phases to create the Java classes and methods for Insert Customer functionality in SSC1 transactions.</p>"},{"location":"execute-the-transform/How%20to%20execute%20the%20Transform%20phase/","title":"How to execute the Transform phase using Visual Studio Code","text":"<ol> <li> <p>Click the Microsoft Windows Start button (A) (the Windows logo in the bottom-left corner of the demo screen), and click Visual Studio Code (B).     </p> </li> <li> <p>Expand the New: IBM watsonx Code Assistant for Z in Z Open Editor twistie, and select Enable the IBM watsonx Code Assistant for Z integration with Z Open Editor (requires an account) checkbox.    </p> </li> <li> <p>Close the Welcome to Z Open Editor window by clicking the X (A) at the top of the tab.    </p> </li> <li> <p>In the EXPLORER panel on the left, ensure that the NAZARE-DEMO-CICS-GENAPP (WORKSPACE) twistie is collapsed (A) (you may not need to do this depending on your screen size), and then expand IBM WATSONX CODE ASSISTANT FOR Z (B).    </p> </li> <li>You will see a warning that Visual Studio Code is missing an API key. Click the Missing watsonx API key warning (A) (the yellow text).    </li> <li>The Enter watsonx API key (Press \u2018Enter\u2019 to confirm or \u2018Escape\u2019 to cancel) box appears at the top of the IDE - Visual Studio Code screen. Enter <code>ABCDEFGH</code> (A), and press the Enter key (B).     Note: <code>ABCDEFGH</code> is a fake API key only for this demo. In a real environment, a real API key must be used.</li> <li>In the EXPLORER panel on the left, expand the NAZARE-DEMO-CICS-GENAPP (WORKSPACE) twistie (A), and click LGACDB01.cbl (B). A new tab opens to the right displaying the COBOL code.    </li> <li>In the EXPLORER panel on the left, right-click LGACDB01.cbl (A), and click Import COBOL program (B).    The COBOL program is imported to IBM WATSONX CODE ASSISTANT FOR Z as base\\LGACDB01.cbl. You might have to collapse the NAZARE-DEMO-CICS-GENAPP (WORKSPACE) twistie.</li> </ol> <p></p> <ol> <li> <p>In the EXPLORER panel, under IBM WATSONX CODE ASSISTANT FOR Z, expand the base\\LGACDB01.cbl twistie (A).     You will see two entries:</p> <ul> <li>Generate Java Identifiers</li> <li>Generate Java Methods</li> </ul> <p></p> </li> <li> <p>Click Generate Java Identifiers (A). A Generate Java Classes input bar appears at the top middle of the IDE - Visual Studio Code screen.     </p> </li> <li>Enter <code>java</code> (A), and press Enter (B).     </li> <li>A new input bar opens in the same location. Enter <code>com.ibm.wcaz</code> (A), and press Enter (B).     </li> <li>A new Java identifiers tab appears on the right-hand side of the window.     </li> <li>Click the twistie to expand the LGACDB01 artifact (A). You can see the variables that are used in the LGACDB01 artifact.</li> <li>Click the twistie to expand the CUSTOMER artifact (B). You can see the variables that are used in the CUSTOMER artifact.     </li> <li>At the right bottom of the Java Identifiers tab, click Generate Java classes (A).     </li> <li>In the EXPLORER panel, return to NAZARE-DEMO-CICS-GENAPP (WORKSPACE) (A).     </li> <li> <p>Double-click Customer.java class (A) to open it. Customer.java opens in a new tab. (You might have to scroll to see all of the code.)     </p> <p>In the Customer.java class, you can see the getter, setters, and variable overrides. </p> </li> <li> <p>In the EXPLORER panel, return to the NAZARE-DEMO-CICS-GENAPP (WORKSPACE) project, and double-click CustomerRequest.java (A) to open it.     </p> </li> <li> <p>CustomerRequest.java opens in a new tab. (You might have to scroll to see all of the code.) At the bottom of CustomerRequest.java, hover over the insertCustomer method name (A). The cursor will change to a hand tool.     </p> </li> <li> <p>Right click on the insertCustomer code (A). Then click IBM Watsonx Code Assistant for Z (B), and click Generate Method (C).</p> <p></p> <p>A new java-generate tab opens to the right. </p> </li> <li> <p>Click Insert (A) at the bottom right of the java-generate tab to insert the Java method into the CustomerRequest.java code file.     </p> <p>Notice that the Java method details are added to CustomerRequest.java class file in the insertCustomer method. </p> </li> </ol>"},{"location":"reserve-the-demo/02%20Reserve%20the%20environment/","title":"Reserve the demo environment","text":"<p>Demo reservations should be submitted 2 days in advance of when you require the environment. The reservation can be accessible for up to 4 days.</p> <ol> <li>Go this link to reserve your demo environment.</li> <li>Click WCA4Z \u2013 Understand, Refactor &amp; Transform phases Demo to expand the section.</li> <li>Click Select.</li> <li>Click Next.    </li> </ol> <p>IBM Business Partners  Contact your IBM Business Partner Representative for environment access. </p>"},{"location":"reserve-the-demo/03%20Logging%20into%20Z%20Virtual%20Access/","title":"Logging into Z Virtual Access","text":"<p>When your IBM Z Virtual Access (zVA) reservation is ready you will receive an email from IBM Z Trail (ztrail@uk.ibm.com) (A) with a link to sign in to zVA.</p> <ol> <li>From the email, click the link to sign in to IBM Z Virtual Access.    </li> <li>Click Access details (A in the image below).</li> <li>Take note of the User for web access point and Password (B).</li> <li>click Web access point box (C). The IBM Z Trail login window opens.</li> <li>Enter the User for web access point and Password values (from the previous screen) into Username and Password (D).</li> <li>Click Sign in (E).        A Windows virtual machine (VM) opens and takes you to an IBM Application Discovery and Delivery Intelligence page to allow you to use the IBM watsonx Code Assistant for Z tools.</li> </ol>"},{"location":"run-the-refactor/Run%20the%20Refactor%20phase%20summary/","title":"Section summary","text":"<p>In the Refactor phase of this lab:</p> <ol> <li>You used information from the Understand phase to select the SSC1 transaction.</li> <li>You used IBM watsonx Code Assistant for Z Refactoring Assistant to refactor the INSERT-CUSTOMER functionality by slicing code from the LGACDB01 artifact into a workbook.</li> <li>You exported this workbook to be used in the Transform phase.</li> </ol>"},{"location":"run-the-refactor/Run%20the%20Refactor%20phase/","title":"How to run the Refactor phase using IBM watsonx Code Assistant for Z Refactoring Assistant","text":"<ol> <li>Open the PuTTy app from the taskbar at the bottom (A) of the demo window. It may take a few minutes to open.    </li> <li>Select wca4z-ra from the Saved Sessions box (A), and click Open (B).    </li> <li>After clicking Open in the previous step the following warning message will pop-up. Click Accept (A). This warning will only be displayed one time if you do this demo again.    </li> <li>A script will run in PuTTy to start the Refactoring Assistant. When you see the text IBM Watson code assistant for Z Refactoring Assistant started (A) at the bottom of the PuTTy window, you can close the PuTTy window by clicking the X (B) in the top-right corner. You will be asked Are you sure you want to close the session?. Click OK (C).    </li> <li>Click the Firefox icon (A) in the taskbar of the demo window to open it. It may take a few minutes to open.    </li> <li>Click the IBM watsonx Code Assistant for Z Refactoring Assistant link in the Favorites bar at the top or click wca4z-ra.ibm below the Firefox search bar (A).    </li> <li>Login with the following credentials, and click Log in (C) to proceed to the IBM watsonx Code Assistant for Z Refactoring Assistant:    - Email address: dev@wca4z-ra.ibm.com (A)    - Password: password (B) </li> <li>After logging in, you will see following tabs:<ul> <li>My workspaces (A) (the default)</li> <li>Workspaces shared with me (B)    After building a project in the Understand phase, you can create a workspace to work on that project with IBM watsonx Code Assistant for Z Refactoring Assistant.</li> </ul> </li> <li>In the My workspaces tab, click Create workspace on the right (A).     </li> <li>In the Create workspace dialog box:<ul> <li>Type a name for the workspace that you want to create. For example: WCA4Z-DEM-WS (A).</li> <li>Optionally, add a description in the Description box (B). For example: Workspace for WCA4Z for GenApp application.</li> <li>Click the AD Project dropdown list, and select the project that you built with the IBM Application Discovery (AD) Build Client. In this lab, select GenApp (C). </li> <li>Click Create (D) to create the workspace. </li> </ul> </li> <li>The GenApp workspace\u2019s Graph tab (A) is displayed. Click in the Search bar (B) at the top. You will see the Artifact type drop-down menu.     </li> <li>Select All artifact types (it\u2019s likely the default) to see a dropdown list of the different artifact types (A).</li> <li>Select CICS transactions (B).     </li> <li>From the dropdown list of transactions, double-click the SSC1 artifact (A) to open it.     </li> <li>The SSC1 transaction graph opens. Zoom out by 10% (A) using the magnifying glass icon (bottom left) until you can see the complete callgraph in the window.     </li> <li>The entire graph should be displayed after zooming out. Locate and click on the CUSTOMER (A) table to highlight the flow of program dependencies for this table.     </li> <li> <p>In the Understand phase, you checked the callgraph for SSC1 transactions and then looked at the INSERT-CUSTOMER query in the LGACDB01 code.</p> <p>Now click the ellipsis icon (3 dots) beside LGACDB01 (A). You are presented with the following actions (B): - View properties - Identify conditional statements. - Identify paragraphs.  - Identify tables/file access statements. </p> </li> <li> <p>Select Identify conditional statements (C) to display all conditional statements in the code in the order of importance/complexity.     </p> </li> <li>The screen will switch to Workbook tab (A) that displays the key conditional statements in the code in the order of importance/complexity (B).     </li> <li>Select the Graph tab (A) on the top right to return to the Graph tab (that\u2019s where you were in steps 17/18).     </li> <li>Repeat the same thing you did in Steps 17/18, only this time select Identify paragraphs (C).     </li> <li> <p>The screen will switch to the Workbook tab with a paragraph identification form.     You will see 3 sections:</p> <ul> <li>Workbook details (A) on the left.</li> <li>Paragraphs in the code (B), in the order of importance/complexity, in the middle section.</li> <li>The artifact\u2019s code (C) in the right section.   </li> </ul> </li> <li> <p>Click INSERT-CUSTOMER (A) in the Key conditions box where Select a key condition type drop-down is set to Paragraphs to jump to this code on the right.     </p> </li> <li> <p>For Windows users: Click the INSERT-CUSTOMER text (line 232) in the code, then right-click (A) to see the Slice on paragraph to new workbook option. Double-click Slice on paragraph to new workbook (B).</p> <p>For Mac users: Click the INSERT-CUSTOMER text (line 232) in the code, then right-click (A) to see the Slice on paragraph to new workbook option. Click Slice on paragraph to new workbook (B). </p> <p>NOTE: Mac users: When you right-click, if the Slice on paragraph to new workbook option does not appear, please update your Mac Systems Settings by clicking the Mac apple icon from your top toolbar &gt; select System Settings &gt; Trackpad. In your Trackpad preferences, update your Secondary click to Click in Bottom Right Corner. Then hover over INSERT-CUSTOMER and click the bottom-right corner of your trackpad to see the Slice on paragraph to new workbook option.</p> </li> <li> <p>The Slice to a new workbook pop-up window will appear. Enter LGACDB01 (A) in the Workbook name field, and click Save (B).     </p> </li> <li> <p>The selected paragraph of code will be sliced into a new workbook (called LGACDB01) and displayed on the left (A). Note how the selected code is marked with a dotted blue line in the code editor on the right (B).     </p> </li> <li> <p>In the Workbook details section, click the ellipsis icon (3 dots) beside Status (A).</p> </li> <li> <p>Select the Export option to export the sliced code (B). An Export workbox LGACDB01 window will appear. Click Save (C).     </p> </li> <li> <p>A pop-up window will appear with a default location to save the exported sliced code. Click Desktop on the left (A) and navigate to the following: Desktop\\WCAZ Lab Data\\nazare-demo-cics-genapp\\base\\src\\cobol (B). Then click Save (C) to save the exported code.     </p> </li> </ol>"}]}